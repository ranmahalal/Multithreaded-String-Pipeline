Multithreaded-StringPipeline
=============================

A flexible, plugin-based string processing system built in C that demonstrates multithreading, dynamic linking, and producer-consumer patterns. This system processes input strings through a configurable pipeline of plugins, where each plugin performs a specific transformation (uppercase conversion, character rotation, string reversal, etc.) in its own thread. Communication between plugins uses bounded, thread-safe queues following the producer-consumer model.

Features
--------
- Multithreaded Architecture: Each plugin runs in its own thread for concurrent processing
- Dynamic Plugin Loading: Plugins are loaded at runtime as shared objects (.so files)
- Thread-Safe Communication: Producer-consumer queues with proper synchronization
- Configurable Pipeline: Specify processing order and queue sizes via command line
- Graceful Shutdown: Clean termination when input is received

Available Plugins
-----------------
- logger: Logs all strings that pass through
- typewriter: Simulates typewriter effect with delays
- uppercaser: Converts strings to uppercase
- rotator: Rotates characters one position right
- flipper: Reverses the order of characters
- expander: Inserts spaces between each character

How it works (high level)
-------------------------
1. The program reads input lines from stdin and pushes them onto the first queue.
2. Each plugin is dynamically loaded and runs a worker thread that pulls from its input queue, transforms the string, and pushes the result onto the next queue.
3. Queues are bounded and synchronized using mutexes and condition variables (producer-consumer pattern) to avoid data races and to provide back-pressure.
4. When a shutdown signal is received, the host coordinates a graceful shutdown by signalling workers and draining queues.


